<?php


/**
* * Implements hook_rules_action_info()
*
*/

function resource_booking_rules_action_info() {
  return array(
    'create_booking_units_week' => array(
      'group' => t('Bookings'),
      'label' => t('Create 1 week of booking units'),
      'parameter' => array (
        'type' => array(
          'type' => 'text',
          'label' => t('Resource type'),
          'options list' => 'rules_resource_type_list',
          'description' => t('Choose all resources or select a resource type'),
          'restriction' => 'input',

        )

      )
    ),
    'delete_booking_units_week' => array(
      'group' => t('Bookings'),
      'label' => t('Delete 1 week ofbooking units'),
      'parameter' => array (
        'type' => array(
          'type' => 'text',
          'label' => t('Resource type'),
          'options list' => 'rules_resource_type_list',
          'description' => t('Choose all resources or select a resource type'),
          'restriction' => 'input',

        )

      )
    ),
  );
}



/****
*A rules action that creates one week of booking units
*Either a week from the booking unit that has the most advanced date
*Or a week from today i no booking units yet exist
*/
function create_booking_units_week($type) {

  //Get the relevant resources
  if ($type=="all_resources") {
    //If all resources, get all bundle types
    $type_array=array_keys(resource_type_get_types());
  } else{
    //Else just get the type sent
    $type_array=array();
    $type_array[]=$type;
  }
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'resource')
  ->entityCondition("bundle",$type_array, "IN")
  ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  if (isset($result['resource'])) {
    $room_ids = array_keys($result['resource']);
  }
  
  //Retrieve the existing bookings
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'booking')
  ->propertyCondition("resource", $room_ids, 'IN');
  $result = $query->execute();
  
  if (!isset($result['booking'])) {
    //If no bookings exist set today as startday
    $startdate_timestamp = time(); //timestamp
    $startdate_string=date('Ymd',$startdate_timestamp); //(todays date in format yyyymmdd)
  } else {
    //Else retrieve booking with most advanced date to use as startdate
    $ids = array_keys($result['booking']);
    $last_booking_id=array();
    $last_booking_id[]=end($ids); //This captures the last booking unit made. IF booking units are made with this module, the last made will be most advanced date
    $last_booking = entity_load('booking',($last_booking_id));
    $lastdate_string=$last_booking["$last_booking_id[0]"]->date;//Get date of last booking in string format
$lastdate_timestamp=strtotime($lastdate_string); //Convert lastdate to timestamp
$startdate_timestamp=strtotime("+1 day",$lastdate_timestamp); //Set startdate to 1 day after the date of last booking
$startdate_string=date('Ymd', $startdate_timestamp);
}
//Set enddate to 1 week from startdate
$enddate_timestamp = strtotime("+6 day", $startdate_timestamp);
$enddate_string=date('Ymd', $enddate_timestamp);
/*
* Determine the default max opening and closing hours
*/
$opening_hour=9;
$closing_hour=21;

/*
* Run a loop which goes through the days and creates
* Booking units for each of the resources
*/

foreach ($room_ids as $room_id) {//Loops through each room id
for ( $i = $startdate_timestamp; $i <= $enddate_timestamp; $i += 86400 ){ //Loops through each date in the date range
$loop_date=date("Ymd",$i); //A string version of the date for use in the loop starts with the beginning date and goes forward 1 day at a time

for ($h = $opening_hour; $h <= $closing_hour; $h++) { //loops through every hour and creates a booking unit
$e = entity_create('booking' , array('type' => 'booking'));
$ew = entity_metadata_wrapper('booking',$e);
$ew->title->set($loop_date."_".$h."_".$room_id);//Not sure what the title should be yet

$ew->resource->set("$room_id");
$ew->date->set($loop_date);

$ew->starthour->set($h);

$ew->save();
}
}
}
}


function delete_booking_units_week($type) {
/****
*A rules action that deletes one week of booking units
*the week is the one with the oldest date
*/
//Get the relevant resources
if ($type=="all_resources") {
//If all resources, get all bundle types
$type_array=array_keys(resource_type_get_types());
} else{
//Else just get the type sent
$type_array=array();
$type_array[]=$type;
}

$query = new EntityFieldQuery();
$query->entityCondition('entity_type', 'resource')
->entityCondition("bundle",$type_array, "IN")
->addMetaData('account', user_load(1)); // Run the query as user 1.
$result = $query->execute();
if (isset($result['resource'])) {
$ids = array_keys($result['resource']);
} else {
return t("error - no resources of this type found");
}



$query = new EntityFieldQuery();
$query->entityCondition('entity_type', 'booking')
->propertyCondition("resource", $ids, 'IN');
$result = $query->execute();


//Establish start date based on bookings found if any
if (!isset($result['booking'])) {
//If no bookings exist set today as startday
$startdate_timestamp = time(); //timestamp
$startdate_string=date('Ymd',$startdate_timestamp); //(todays date in format yyyymmdd)
} else {
//Else retrieve booking with earliest date to use as startdate
$ids = array_keys($result['booking']);
$fisrt_booking_id=array();
$first_booking_id[]=reset($ids); //This captures the first booking unit made. IF booking units are made with this module, the first made will be earliest date
$first_booking = entity_load('booking',($first_booking_id));
$firstdate_string=$first_booking["$first_booking_id[0]"]->date;//Get date of first booking in string format
$firstdate_timestamp=strtotime($firstdate_string); //Convert lastdate to timestamp
$startdate_timestamp=$firstdate_timestamp; //Set startdate to date of rist booking
$startdate_string=date('Ymd', $startdate_timestamp);
}
//Set enddate to 1 week from startdate
$enddate_timestamp = strtotime("+6 day", $startdate_timestamp);
$enddate_string=date('Ymd', $enddate_timestamp);


/*
* Determine the default max opening and closing hours
*/
$opening_hour=9;
$closing_hour=21;


//DO a loop to delete bookings for the correct dates
//Limit to type if necessary

//First if not type specified simply delete all bookings for date range
if ($type == "all_resources") {
for ( $i = $startdate_timestamp; $i <= $enddate_timestamp; $i += 86400 ){ //Loops through each date in the date range
$loopdate_string=date('Ymd', $i); //creates a datestring to match bookings with
$query = new EntityFieldQuery();
$query->entityCondition('entity_type', 'booking')
->entityCondition('bundle', 'booking')
->propertyCondition('date',$loopdate_string)
->addMetaData('account', user_load(1));
$result = $query->execute();
if (isset($result['booking'])) {
$ids = array_keys($result['booking']);
}
dsm("$loopdate_string");
entity_delete_multiple('booking', $ids);
}
} else {
//If type specified must loop through each resource and delete for the date range
foreach ($ids as $room_id) {
for ( $i = $startdate_timestamp; $i <= $enddate_timestamp; $i += 86400 ){
$loopdate_string=date('Ymd', $i); //creates a datestring to match bookings with
$query = new EntityFieldQuery();
$query->entityCondition('entity_type', 'booking')
->entityCondition('bundle', 'booking')
->propertyCondition('resource',$room_id)
->propertyCondition('date',$loopdate_string)
->addMetaData('account', user_load(1));
$result = $query->execute();
if (isset($result['booking'])) {
$ids = array_keys($result['booking']);
}
entity_delete_multiple('booking', $ids);
}
}
}
}



function rules_resource_type_list() {
$types=array();

$types=resource_type_get_types();
$resource_types=array_keys($types);
array_unshift($resource_types,"all_resources");
$new_array=array_combine($resource_types,$resource_types);
return $new_array;


}